package com.boot.temporal.manager;

import com.boot.temporal.po.WorkerStreamReq;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;

/**
 * 功能描述：
 *
 * @program: money-transfer-project-template-java
 * @author: 代号007
 * @create: 2022-02-21 15:14
 **/
@Slf4j
@Component
public class Algorithm1Manager {

    public void exec(WorkerStreamReq req) throws InterruptedException {
        log.info("在此处你应该执行Algorithm1核心逻辑");
        String str = "11";

        // 测试最大容量
//        String str = "";
        StringBuilder sb = new StringBuilder(str);
//        for (int i = 0; i < 300; i++) {
//            if (i % 100 == 0) {
//                System.out.println("---->>>>> " + i);
//            }
//            sb.append(str);
//        }
//        Thread.sleep(5000);
    }
}
